{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","serviceWorker.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","el","id","title","images","downsized_medium","initialState","loading","error","GifGridItem","className","src","alt","GifGrid","state","setState","useEffect","then","catch","finally","makeRequest","useFetchGifs","image","key","GifExpertApp","categories","setcategories","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"iOAqCeA,MAlCf,YAA0C,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAkBvC,OACE,0BAAMC,SAVa,SAAAC,GACnBA,EAAEC,iBAEGJ,IAELF,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,OACtCJ,EAAc,OAKZ,2BACEK,KAAK,OACLC,YAAY,6BACZC,MAAOR,EACPS,SApBoB,SAACN,GAAO,IACxBK,EAAUL,EAAEO,OAAZF,MACRP,EAAcO,Q,8BCMHG,EAfF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACRC,EADQ,iDACyCC,UAAUH,GADnD,+DAEII,MAAMF,GAFV,cAERG,EAFQ,gBAGSA,EAAIC,OAHb,uBAGNC,EAHM,EAGNA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAE,YAAK,CAC3BC,GAAID,EAAGC,GACPC,MAAOF,EAAGE,MACVV,IAAG,UAAEQ,EAAGG,cAAL,aAAE,EAAWC,iBAAiBZ,QARrB,kBAWPM,GAXO,4CAAH,sDCGPO,EAAe,CACnBR,KAAM,GACNS,SAAS,EACTC,OAAO,GCgBMC,EAnBK,SAAC,GAAoB,IAAlBhB,EAAiB,EAAjBA,IAAKU,EAAY,EAAZA,MAC1B,OACE,yBAAKO,UAAU,QACb,yBAAKA,UAAU,cACb,yBACEC,IAAKlB,EACLmB,IAAKT,KAET,2BAAIA,KCqBKU,EAzBC,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAAe,EFEN,SAACA,GAAc,IAAD,EACdb,mBAAS4B,GADK,mBACjCQ,EADiC,KAC1BC,EAD0B,KA6BxC,OA1BAC,qBAAU,YACS,uCAAG,sBAAAxB,EAAA,sDAClBF,EAAQC,GACP0B,MAAK,SAAAnB,GACJiB,GAAS,SAAAD,GAAK,kCACTA,GADS,IAEZhB,KAAK,GAAD,mBAAMA,GAAN,YAAegB,EAAMhB,OACzBU,OAAO,UAGVU,OAAM,SAAApC,GACLiC,GAAS,SAAAD,GAAK,kCACTA,GADS,IAEZN,OAAO,UAGVW,SAAQ,WACPJ,GAAS,SAAAD,GAAK,kCACTA,GADS,IAEZP,SAAS,UAlBK,2CAAH,qDAsBjBa,KACC,CAAC7B,IAEGuB,EE7BgCO,CAAa9B,GAAtCQ,EAFkB,EAExBD,KAAYU,EAFY,EAEZA,MAAOD,EAFK,EAELA,QAE3B,OACE,yBAAKG,UAAU,8DACb,4BAAKnB,GACFgB,GAAY,2CACbC,GAAS,iEACX,yBAAKE,UAAU,aACZX,EAAKC,KAAK,SAAAsB,GAAK,OACd,kBAAC,EAAD,eACEC,IAAKD,EAAMpB,IACPoB,UChBD,SAASE,IAAgB,IAAD,EAED9C,mBAAS,CAAC,cAFT,mBAE9B+C,EAF8B,KAElBC,EAFkB,KAIrC,OACE,oCACE,8CACA,kBAAC,EAAD,CAAajD,cAAeiD,IAC5B,6BACA,oCACGD,EAAWzB,KAAI,SAAAT,GAAQ,OACtB,kBAAC,EAAD,CACEgC,IAAKhC,EACLA,SAAUA,SCLFoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,EAAD,OAEFW,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdvB,OAAM,SAAAV,GACLkC,QAAQlC,MAAMA,EAAMmC,c","file":"static/js/main.e95bf4bf.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction AddCategory ({ setCategories }) {\r\n\r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handleInputChange = (e) => {\r\n    const { value } = e.target\r\n    setInputValue(value)\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n\r\n    if (!inputValue) return;\r\n\r\n    setCategories(cats => [inputValue, ...cats])\r\n    setInputValue('')\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type='text'\r\n        placeholder=\"Naruto, One Punch Man, Lol\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","const getGifs = async category => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=mQyfl0YYKW18ivTdrxlpqZIGWvHIx1Wt`\r\n  const res = await fetch(url)\r\n  const { data } = await res.json()\r\n\r\n  const gifs = data.map(el => ({\r\n    id: el.id,\r\n    title: el.title,\r\n    url: el.images?.downsized_medium.url\r\n  }))\r\n\r\n  return gifs\r\n\r\n}\r\n\r\nexport default getGifs\r\n","import { useState, useEffect } from 'react'\r\nimport getGifs from '../helpers/getGifs'\r\n\r\nconst initialState = {\r\n  data: [],\r\n  loading: true,\r\n  error: false\r\n}\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    const makeRequest = async () => {\r\n      getGifs(category)\r\n      .then(data => {\r\n        setState(state => ({\r\n          ...state,\r\n          data: [...data, ...state.data],\r\n          error: false\r\n        }))\r\n      })\r\n      .catch(e => {\r\n        setState(state => ({\r\n          ...state,\r\n          error: true\r\n        }))\r\n      })\r\n      .finally(() => {\r\n        setState(state => ({\r\n          ...state,\r\n          loading: false\r\n        }))\r\n      })\r\n    }\r\n    makeRequest()\r\n  }, [category])\r\n\r\n  return state\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ({ url, title }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-image\">\r\n        <img\r\n          src={url}\r\n          alt={title} />\r\n      </div>\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default GifGridItem","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem'\r\n// import getGifs from '../helpers/getGifs'\r\n\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n  const { data: gifs, error, loading } = useFetchGifs(category)\r\n\r\n  return (\r\n    <div className=\"animate__animated animate__fadeInDownBig animate__delay-2s\">\r\n      <h3>{category}</h3>\r\n      {  loading &&  <p>Cargando ...</p> }\r\n      { error && <p>ocurrio un error cargando los gifs</p>}\r\n      <div className=\"card-grid\">\r\n        {gifs.map( image => (\r\n          <GifGridItem\r\n            key={image.id}\r\n            {...image}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid  from './components/GifGrid'\r\n\r\nexport default function GifExpertApp() {\r\n\r\n  const [categories, setcategories] = useState(['One Punch'])\r\n\r\n  return (\r\n    <>\r\n      <h2>Gif Expert App</h2>\r\n      <AddCategory setCategories={setcategories} />\r\n      <hr />\r\n      <>\r\n        {categories.map(category => (\r\n          <GifGrid\r\n            key={category}\r\n            category={category}\r\n          />\r\n        ))}\r\n      </>\r\n    </>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}